Q: What is a Dockerfile and why do we need it?
A:
- A blueprint for creating Docker images
- Contains instructions for building an application into a container
- Part of application code (like docker-compose.yaml)
- Enables automated and consistent image building

Q: What is the basic structure of a Dockerfile?
A:
```
# Base image
FROM node:latest

# Environment variables
ENV KEY=value

# Execute commands
RUN mkdir -p /home/app

# Copy files from host to container
COPY . /home/app

# Entry point command
CMD ["node", "server.js"]
```

Q: What's the difference between RUN and CMD commands?
A:
1. RUN:
   - Executes during image build
   - Can have multiple RUN commands
   - Used for installing dependencies, creating directories
   - Executes inside container environment

2. CMD:
   - Specifies the entry point command
   - Only one CMD effective per Dockerfile
   - Runs when container starts
   - Can be overridden at runtime

Q: How does the FROM instruction work?
A:
- Specifies the base image
- Always the first instruction in Dockerfile
- Examples:
  ```
  FROM node:latest     Latest Node.js image
  FROM node:14         Specific Node.js version
  FROM ubuntu:20.04    Ubuntu base image
  ```
- Provides pre-installed tools/runtime (like Node.js)

Q: What's the difference between COPY and RUN cp commands?
A:
```
# COPY executes on host, copies from host to container
COPY ./app /home/app

# RUN cp executes inside container
RUN cp /source /destination
```
Key differences:
- COPY: Host → Container transfer
- RUN cp: Container → Container transfer

Q: How do environment variables work in Dockerfiles?
A:
```
# In Dockerfile (build time)
ENV NODE_ENV=production
ENV PORT=3000

# Better practice: Use docker-compose.yaml (runtime)
services:
  app:
    environment:
      - NODE_ENV=production
      - PORT=3000
```
- ENV in Dockerfile: Hardcoded, requires rebuild
- docker-compose: More flexible, can change without rebuild

Q: What's the typical workflow for building and deploying an application?
A:
1. Development:
   - Write application code
   - Create Dockerfile
   - Create docker-compose.yaml (if needed)

2. Build Process:
   - Build Docker image from Dockerfile
   - Test the image locally
   - Push to Docker registry

3. CI/CD (e.g., Jenkins):
   - Pulls code
   - Builds application
   - Creates Docker image
   - Pushes to registry
   - Deploys to environment

Q: What are best practices for Dockerfile creation?
A:
1. Base Image Selection:
   - Use official images
   - Choose specific versions
   - Use lightweight images when possible

2. Optimization:
   - Combine RUN commands using &&
   - Use .dockerignore
   - Order instructions by change frequency

3. Security:
   - Don't store secrets in Dockerfile
   - Use multi-stage builds
   - Minimize image size

4. Maintainability:
   - Document with comments
   - Keep it simple
   - Follow consistent naming conventions

This provides a foundation for understanding how to package applications into Docker containers using Dockerfiles.

Q: What's the basic workflow for containerizing a Node.js application?
A:
1. Create Dockerfile
2. Build image
3. Run container
4. Test application
5. Push to registry

Q: What's a proper Dockerfile for a Node.js application?
A:
```
# Use specific version instead of latest
FROM node:13-alpine

# Environment variables
ENV MONGO_DB_USERNAME=admin
ENV MONGO_DB_PASSWORD=password

# Create app directory
RUN mkdir -p /home/app

# Copy application files
COPY ./app /home/app

# Set working directory
WORKDIR /home/app

# Start application
CMD ["node", "server.js"]
```

Q: How do you build and manage Docker images?
A:
```
# Build image
docker build -t myapp:1.0 .

# List images
docker images

# Remove image (must remove containers first)
docker rm <container-id>
docker rmi myapp:1.0

# Run container
docker run -d myapp:1.0

# Enter container
docker exec -it <container-id> /bin/sh
```

Q: What are best practices for application files in Docker?
A:
1. Use .dockerignore:
```
node_modules
Dockerfile
docker-compose.yaml
.git
.env
```

2. Organize application files:
```
project/
├── app/               Only application files
│   ├── server.js
│   ├── package.json
│   └── src/
├── Dockerfile         Build configuration
└── docker-compose.yaml
```

3. Copy only necessary files:
```
COPY ./app /home/app
```

Q: How do you check container environment?
A:
```
# Enter container
docker exec -it <container-id> /bin/sh

# Check environment variables
env

# Verify files
ls /home/app

# Check processes
ps aux

# Exit container
exit
```

Q: What are common issues and solutions?
A:
1. Command not found:
   - Try /bin/sh instead of /bin/bash
   - Alpine uses different shell

2. Can't delete image:
   - Stop container first: docker stop <container-id>
   - Remove container: docker rm <container-id>
   - Then remove image: docker rmi <image-id>

3. File not found:
   - Check WORKDIR setting
   - Verify file paths in COPY commands
   - Ensure files exist in build context

Q: How do you integrate with docker-compose?
A:
```
version: '3'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - MONGO_DB_USERNAME=admin
      - MONGO_DB_PASSWORD=password
    depends_on:
      - mongodb
  
  mongodb:
    image: mongo
     mongodb config...
```

Key points to remember:
1. Always use specific versions for base images
2. Copy only necessary files
3. Use .dockerignore to exclude unnecessary files
4. Set proper WORKDIR
5. Use environment variables for configuration
6. Test container internally before exposing ports
7. Consider using multi-stage builds for production

This provides a comprehensive guide for containerizing Node.js applications using Docker.
