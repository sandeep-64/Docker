Q: What makes containers lightweight compared to virtual machines?
A: Containers are lightweight because:
1. They don't have a complete guest operating system
2. They share resources from the host operating system's kernel
3. They only contain minimal system dependencies needed for isolation
4. They only use resources when running
5. Example: Ubuntu official Docker image is 28.16 MB vs Ubuntu VM image of 2.3 GB

Q: Why do containers need some system dependencies if they share resources from the kernel?
A: Containers need some system dependencies to:
- Create logical isolation between containers
- Prevent security breaches between containers
- Ensure one container cannot access another container's resources
- Maintain security boundaries between different applications/projects

Q: What are the key files and folders that containers have?
A: Containers include:
- /bin: Container binary execution files
- /sbin: System binary execution files
- /etc: Configuration files for system services
- /lib: Library files
- /usr: User-related files
- /var: Log files
- /root: Home directory for root user

Q: What resources do containers share from the host operating system?
A: Containers share:
- File system
- Networking stack
- System calls
- Namespaces
- Control groups (cgroups)
- Other kernel-related resources

Q: How efficient is container resource usage compared to VMs?
A: Containers are more efficient because:
- They only use resources when running
- Multiple containers can run on the same VM
- Resources can be shared between containers when not in use
- You can run 10-40 containers on the same VM depending on resource usage
- Unlike VMs, containers don't need individual guest operating systems

Q: What is Docker in simple terms?
A: Docker is a platform that implements containerization. While containerization is the concept, Docker is the technology/platform that makes it practical to use containers.

Q: What is the basic architecture of Docker?
A: Docker architecture consists of three main components:
1. Docker Client (CLI) - Where users enter commands
2. Docker Daemon - The core process that:
   - Receives commands from the client
   - Manages containers and images
   - Handles registry operations
3. Docker Registry - Where container images are stored

Q: What is Docker Daemon and why is it important?
A: Docker Daemon (dockerd) is:
- The heart of Docker
- A process that receives and executes Docker CLI commands
- Responsible for managing containers and images
- Critical for Docker operation - if it goes down, containers stop working

Q: What is the lifecycle of Docker?
A: The Docker lifecycle consists of:
1. Write a Dockerfile (set of instructions)
2. Build Docker image using docker build
3. Create and run container using docker run
4. Share container image through registry

Q: What is Docker Hub and how does it differ from GitHub?
A: 
- Docker Hub is a public registry for sharing Docker images
- Similar to GitHub but for container images instead of source code
- Can have both public and private repositories
- One of many possible registries (others include quay.io)
- Requires account creation for pushing images

Here are the key points from this part about creating and sharing your first Docker container:

Q: What was the example application and why was it chosen?
A: 
- A simple Python "Hello World" application (app.py)
- Chosen to demonstrate Docker basics without complexity
- Shows how Docker simplifies deployment compared to traditional VM setup

Q: What are the steps to install Docker on Ubuntu?
A: 
1. sudo apt update
2. sudo apt install docker.io -y
3. sudo systemctl status docker (to verify)
4. sudo usermod -aG docker $USER (to add user to docker group)
5. Log out and log back in

Q: What are the key components of the first Dockerfile?
A:
```
FROM ubuntu:latest

# Set the working directory in the image
WORKDIR /app

# Copy the files from the host file system to the image file system
COPY . /app

# Install the necessary packages
RUN apt-get update && apt-get install -y python3 python3-pip

# Set environment variables
ENV NAME World

# Run a command to start the application
CMD ["python3", "app.py"]
```
- FROM: Specifies base image (Ubuntu)
- WORKDIR: Sets working directory
- COPY: Copies application files
- RUN: Installs dependencies
- CMD: Specifies command to run

Q: How do you build and run the Docker image?
A:
1. Build: docker build -t username/repository:tag .
2. Run: docker run -it username/repository:tag

Q: How do you share the Docker image?
A:
1. Create Docker Hub account
2. docker login with credentials
3. docker push username/repository:tag
4. Others can pull using: docker pull username/repository:tag

The key advantage demonstrated is that instead of manually setting up Python and dependencies on each machine, users can simply pull and run the container.
