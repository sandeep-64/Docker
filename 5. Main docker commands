Q: What is Docker Hub?
A: Docker Hub is a repository where:
- All artifacts are images (not containers)
- Contains Docker official images
- Users can pull images to their local machine
- Images have different versions/tags available

Q: How do you work with Docker images?
A: You can:
- Pull images
  ``` 
  docker pull [image-name]
  ```
- View local images 
  ```
  docker images 
  ```
- removes unused images
  ```
  docker rmi [image] - 
  ```
- See different versions/tags of images in Docker Hub
- The "latest" tag is used by default if no version is specified

Q: How do you create and manage containers?
A: Several key commands:
- creates and starts a container
  ```
  docker run [image-name]
  ```
- shows running containers
  ```
  docker ps
  ```
- shows all containers (running and stopped)
  ```
  docker ps -a
  ```
- stops a container
  ```
  docker stop [container-id]
  ```
- starts a stopped container
  ```
  docker start [container-id]
  ```

Q: What's the difference between attached and detached modes?
A: Two running modes:
- Attached mode (default): Shows container output in terminal, stops with Ctrl+C
- Detached mode (-d flag): Runs in the background, returns container ID
- Example: 
  ```
  docker run -d redis
  ```

Q: How can you run multiple versions of the same application?
A: You can:
- Pull different versions using tags (e.g., redis:4.0 vs redis:5.0.6)
- Run multiple containers with different versions simultaneously

Q: What's the difference between docker run and docker start?
A:
- docker run: Creates a new container from an image with specified attributes
  - Used when starting a container for the first time
  - Can specify options like ports (-p), detach mode (-d), names, etc.
- docker start: Restarts an existing stopped container
  - Retains all attributes defined during container creation
  - Cannot modify original container settings

Q: What are the essential options for docker run?
A:
- -d: Run container in detached mode (background)
- -p HOST_PORT:CONTAINER_PORT: Bind ports
- --name CONTAINER_NAME: Assign custom name to container
Example:
``` 
docker run -d -p 6001:6379 --name redis-latest redis
```
Q: How do you troubleshoot Docker containers?
A: Two main commands:
1. docker logs [container_id/name]: View container logs
2. docker exec -it [container_id/name] bash: 
   - Get an interactive terminal inside the container
   - Navigate filesystem
   - Check configurations
   - View environment variables

Q: How do you manage running containers?
A:
- docker ps: Show running containers
- docker ps -a: Show all containers (including stopped)
- docker stop [container_id/name]: Stop a container
- Use meaningful names with --name flag for easier management
- Example: docker run --name redis-older redis:4.0
- Each container can use the same port internally without conflict
- Use to run specific versions
  ```
  docker run [image-name]:[tag] 
  ```
